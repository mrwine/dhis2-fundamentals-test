0
00:00:00,350 --> 00:00:03,110
- [Narrator] So another area that I wanted to discuss

1
00:00:03,110 --> 00:00:05,070
was data element value types,

2
00:00:05,070 --> 00:00:07,910
in particular, numerical value types.

3
00:00:07,910 --> 00:00:09,850
And this is true for whether you&#39;re using tracker

4
00:00:09,850 --> 00:00:11,440
or aggregate data.

5
00:00:11,440 --> 00:00:14,520
So there&#39;s a lot of different numeric value types

6
00:00:14,520 --> 00:00:16,280
that are available in DHIS2.

7
00:00:16,280 --> 00:00:17,830
So there&#39;s six to be exact,

8
00:00:17,830 --> 00:00:19,540
and we can see a description of them here.

9
00:00:19,540 --> 00:00:21,420
I&#39;m not going to say the description.

10
00:00:21,420 --> 00:00:24,130
You can please download the slides and you can have a look

11
00:00:24,130 --> 00:00:25,120
at the description of each

12
00:00:25,120 --> 00:00:27,880
or you can of course, refer to the documentation.

13
00:00:27,880 --> 00:00:29,490
Now what happens here?

14
00:00:29,490 --> 00:00:31,510
The data element value types actually place

15
00:00:31,510 --> 00:00:35,250
a hard check on what data, sorry,

16
00:00:35,250 --> 00:00:38,660
can be stored within the data element itself.

17
00:00:38,660 --> 00:00:42,150
So if I pick number as my numeric value type

18
00:00:42,150 --> 00:00:44,360
for a particular data element,

19
00:00:44,360 --> 00:00:46,930
this means I can enter basically any value.

20
00:00:46,930 --> 00:00:48,460
I can enter a negative value.

21
00:00:48,460 --> 00:00:50,720
I can enter a value with the decimal point.

22
00:00:50,720 --> 00:00:53,930
I can enter a value that is maybe not valid, right?

23
00:00:53,930 --> 00:00:55,970
So we have to be much more careful

24
00:00:55,970 --> 00:00:57,860
when we actually have a look at this,

25
00:00:57,860 --> 00:00:59,050
and one thing you can do,

26
00:00:59,050 --> 00:01:01,470
I&#39;ll make sure to put the link to the instance

27
00:01:01,470 --> 00:01:04,900
in this presentation, but you can go to this instance,

28
00:01:04,900 --> 00:01:06,970
it&#39;s the Sierra Leone demo instance,

29
00:01:06,970 --> 00:01:08,890
and just have a look at the value types.

30
00:01:08,890 --> 00:01:11,950
If you go to maintenance and data elements,

31
00:01:11,950 --> 00:01:15,840
and then filter the list by value types,

32
00:01:15,840 --> 00:01:18,650
check number for example, and see if it&#39;s appropriate

33
00:01:18,650 --> 00:01:20,760
for a lot of the data elements that are there.

34
00:01:20,760 --> 00:01:22,630
And if it&#39;s not, you know,

35
00:01:22,630 --> 00:01:24,480
maybe something should be considered.

36
00:01:25,662 --> 00:01:29,800
I&#39;d say about 80% of the time or more,

37
00:01:29,800 --> 00:01:31,170
depending on the system,

38
00:01:31,170 --> 00:01:34,400
positive integer is typically the numerical type

39
00:01:34,400 --> 00:01:37,380
that you would want to apply to your data elements.

40
00:01:37,380 --> 00:01:40,000
You&#39;re often not going to have lots of negative values.

41
00:01:40,000 --> 00:01:41,940
Of course, there are specific scenarios

42
00:01:41,940 --> 00:01:43,430
where you will need that,

43
00:01:43,430 --> 00:01:45,630
but you won&#39;t need it most of the time.

44
00:01:45,630 --> 00:01:48,190
You also will need having, you know,

45
00:01:48,190 --> 00:01:49,490
other than having whole values,

46
00:01:49,490 --> 00:01:53,320
you probably will need some hard check on this.

47
00:01:53,320 --> 00:01:57,190
So this means when I enter anything below zero,

48
00:01:57,190 --> 00:01:58,650
if I enter negative value

49
00:01:58,650 --> 00:02:00,706
or if I enter a value with the decimal place,

50
00:02:00,706 --> 00:02:03,370
DHIS just won&#39;t store that value.

51
00:02:03,370 --> 00:02:05,250
So you do have to be careful in some sense,

52
00:02:05,250 --> 00:02:06,520
because you wanna make sure

53
00:02:06,520 --> 00:02:09,030
they can enter the value that they need to, you know.

54
00:02:09,030 --> 00:02:12,030
There is scenarios of course, where you might need decimals,

55
00:02:12,030 --> 00:02:13,960
maybe you&#39;re importing data for example,

56
00:02:13,960 --> 00:02:15,870
for an adventure tracker program of some kind,

57
00:02:15,870 --> 00:02:17,510
maybe a survey for example,

58
00:02:17,510 --> 00:02:19,900
where there&#39;s some percentages calculated

59
00:02:19,900 --> 00:02:21,120
and you&#39;re storing that.

60
00:02:21,120 --> 00:02:24,130
So you should be aware of the value type of course,

61
00:02:24,130 --> 00:02:26,140
that you&#39;re utilizing in that scenario.

62
00:02:26,140 --> 00:02:28,110
I&#39;m not saying always use this value

63
00:02:28,110 --> 00:02:29,490
and value type, but you know,

64
00:02:29,490 --> 00:02:32,040
it&#39;s probably the one that you often wanna use the most.

65
00:02:32,040 --> 00:02:34,050
And if you just have a quick look in systems,

66
00:02:34,050 --> 00:02:35,560
if you go to their maintenance,

67
00:02:35,560 --> 00:02:36,760
their data element maintenance

68
00:02:36,760 --> 00:02:40,300
and just kind of check, filter out that list and see, okay,

69
00:02:40,300 --> 00:02:42,570
is there a lot of numbers and is that appropriate

70
00:02:42,570 --> 00:02:43,620
for the data elements

71
00:02:45,161 --> 00:02:46,400
that are actually stored in my system?

72
00:02:46,400 --> 00:02:49,510
Because if it&#39;s not, then there might be some consideration

73
00:02:49,510 --> 00:02:50,870
in order to change that.

74
00:02:50,870 --> 00:02:51,850
The issue is of course,

75
00:02:51,850 --> 00:02:53,636
if you&#39;re going to update this and modify this,

76
00:02:53,636 --> 00:02:57,900
there could be values that are stored already previously.

77
00:02:57,900 --> 00:02:59,580
So you would wanna go through kind of do

78
00:02:59,580 --> 00:03:01,520
a bit of an audit of it and just make sure

79
00:03:01,520 --> 00:03:03,772
that you&#39;re not kind of messing

80
00:03:03,772 --> 00:03:04,610
things up even more than they already are,

81
00:03:04,610 --> 00:03:06,670
but you can see the kind of impact

82
00:03:06,670 --> 00:03:09,200
that the value type would have on your data quality.

83
00:03:09,200 --> 00:03:11,610
If you&#39;re having all kinds of incorrect values

84
00:03:11,610 --> 00:03:13,850
being stored in your data elements, then of course,

85
00:03:13,850 --> 00:03:15,800
when you go to do your aggregation,

86
00:03:15,800 --> 00:03:17,210
it&#39;s going to be wrong as well.

87
00:03:17,210 --> 00:03:18,410
So when you review your data

88
00:03:18,410 --> 00:03:20,450
or when you see any of your data outputs,

89
00:03:20,450 --> 00:03:21,610
there&#39;s going to be some problems

90
00:03:21,610 --> 00:03:23,790
with your data quality in all likelihood.

91
00:03:23,790 --> 00:03:25,870
And this is more a result of user error

92
00:03:25,870 --> 00:03:27,150
and things of that nature, right?

93
00:03:27,150 --> 00:03:29,760
Maybe these values aren&#39;t being entered like this

94
00:03:29,760 --> 00:03:31,510
incorrectly on the paper even,

95
00:03:31,510 --> 00:03:33,230
but when they go to enter it on their keyboard,

96
00:03:33,230 --> 00:03:35,370
lots of things can happen of course, right?

97
00:03:35,370 --> 00:03:37,020
So we just have to be a bit careful

98
00:03:37,020 --> 00:03:38,800
and institute this check,

99
00:03:38,800 --> 00:03:41,640
just for the sake of kind of covering, you know,

100
00:03:41,640 --> 00:03:44,333
this particular portion of our configuration.

